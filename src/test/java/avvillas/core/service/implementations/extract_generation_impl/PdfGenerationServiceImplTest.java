package avvillas.core.service.implementations.extract_generation_impl;

import avvillas.core.service.extract_generation.PdfGenerationService;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import java.nio.charset.StandardCharsets;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;

class PdfGenerationServiceImplTest {

    private PdfGenerationService service;

    @BeforeEach
    void setUp() {
        // Provide some dummy font bytes. The implementation only sets them once and uses Arial alias.
        byte[] dummyFont = "dummy-font".getBytes(StandardCharsets.UTF_8);
        service = new PdfGenerationServiceImpl(dummyFont);
    }

    @AfterEach
    void tearDown() {
        PdfGenerationServiceImpl.cleanupThread();
    }

    @Test
    @DisplayName("generatePdf should return non-empty PDF bytes for valid minimal HTML")
    void generatePdf_success_minimalHtml() {
        Map<String, Object> clientData = new HashMap<>();
        clientData.put("fileName", "test-file");
        String html = "<html><head><meta charset='utf-8'></head><body><h1>Hello</h1><p>World</p></body></html>";

        byte[] pdf = service.generatePdf(clientData, html);

        assertNotNull(pdf, "Returned byte array should not be null");
        assertTrue(pdf.length > 0, "Returned PDF should not be empty");
        // PDF files usually start with %PDF header
        String header = new String(pdf, 0, Math.min(pdf.length, 4), StandardCharsets.US_ASCII);
        assertEquals("%PDF", header, "Generated bytes should start with %PDF header");
    }

    @Test
    @DisplayName("generatePdf should handle invalid HTML and return empty array while logging error")
    void generatePdf_handlesException() {
        Map<String, Object> clientData = Collections.singletonMap("fileName", "bad-html-file");
        // Purposely provide malformed input to trigger an exception in renderer
        String invalidHtml = "<html><body><div>Unclosed tags"; // missing closing tags; may trigger renderer issues

        byte[] pdf = service.generatePdf(clientData, invalidHtml);

        // Depending on renderer tolerance, it may still produce a PDF. If it does, we still consider it success.
        // To make the test deterministic, if bytes are produced, ensure they look like a PDF; otherwise they should be empty per catch block.
        if (pdf != null && pdf.length >= 4) {
            String header = new String(pdf, 0, 4, StandardCharsets.US_ASCII);
            assertTrue("%PDF".equals(header) || pdf.length == 0, "If not empty, generated bytes must start with %PDF header");
        } else {
            assertArrayEquals(new byte[0], pdf, "On failure, service should return empty byte array");
        }
    }

    @Test
    @DisplayName("cleanupThread should remove ThreadLocal builder and create a new instance afterward")
    void cleanupThread_resetsBuilder() {
        Map<String, Object> clientData = Collections.singletonMap("fileName", "before-cleanup");
        String html = "<html><body><p>First</p></body></html>";
        byte[] first = service.generatePdf(clientData, html);
        assertNotNull(first);
        assertTrue(first.length > 0);

        // cleanup the ThreadLocal and call again - it should still work, implying a new builder is created
        PdfGenerationServiceImpl.cleanupThread();

        clientData = Collections.singletonMap("fileName", "after-cleanup");
        byte[] second = service.generatePdf(clientData, html);
        assertNotNull(second);
        assertTrue(second.length > 0);
        String header = new String(second, 0, Math.min(second.length, 4), StandardCharsets.US_ASCII);
        assertEquals("%PDF", header);
    }
}
